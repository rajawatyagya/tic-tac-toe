{"version":3,"sources":["components/Square/Square.js","components/Board/Board.js","components/Game/Game.js","App.js","index.js"],"names":["Square","props","Button","className","onClick","variant","value","Board","i","this","winner","includes","squares","Card","Body","renderSquare","React","Component","Game","state","history","Array","fill","stepNumber","xIsNext","slice","length","calculateWinner","setState","concat","step","status","current","moves","map","move","desc","ListGroup","Item","key","action","jumpTo","bg","Header","Title","handleClick","Footer","reset","lines","a","b","c","App","style","fontSize","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.601da720.chunk.js","sourcesContent":["import React from 'react';\nimport './Square.css';\nimport Button from 'react-bootstrap/Button';\n\nfunction Square(props) {\n    return (\n        <Button className=\"square\"\n                onClick={props.onClick}\n                variant={props.variant}\n        >\n            {props.value}\n        </Button>\n    );\n}\n\nexport default Square;\n","import React from \"react\";\nimport Square from \"../Square/Square\";\nimport './Board.css';\nimport Card from 'react-bootstrap/Card';\n\nexport class Board extends React.Component {\n\n    renderSquare(i) {\n        let variant;\n        if (this.props.winner) {\n            variant = this.props.winner.includes(i) ? 'outline-success' : 'outline-secondary';\n        }\n        else {\n            variant = 'outline-secondary';\n        }\n        return <Square\n            value={this.props.squares[i]}\n            onClick={() => this.props.onClick(i)}\n            variant={variant}\n        />;\n    }\n\n    render() {\n        return (\n            <Card.Body>\n                <div className=\"board-row\">\n                    {this.renderSquare(0)}\n                    {this.renderSquare(1)}\n                    {this.renderSquare(2)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(3)}\n                    {this.renderSquare(4)}\n                    {this.renderSquare(5)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(6)}\n                    {this.renderSquare(7)}\n                    {this.renderSquare(8)}\n                </div>\n            </Card.Body>\n        );\n    }\n}\n","import React from \"react\";\nimport {Board} from \"../Board/Board\";\nimport './Game.css';\nimport Card from 'react-bootstrap/Card';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Button from \"react-bootstrap/Button\";\n\nexport class Game extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            history: [{\n                squares: Array(9).fill(null),\n            }],\n            stepNumber: 0,\n            xIsNext: true,\n        };\n    }\n\n    handleClick(i) {\n        const history = this.state.history.slice(0,\n            this.state.stepNumber + 1);\n        const current = history[history.length - 1];\n        const squares = current.squares.slice();\n        if (calculateWinner(squares) || squares[i]) {\n            return;\n        }\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\n        this.setState({\n            history: history.concat([{\n                squares: squares,\n            }]),\n            stepNumber: history.length,\n            xIsNext: !this.state.xIsNext,\n        });\n    }\n\n    jumpTo(step) {\n        this.setState({\n            stepNumber: step,\n            xIsNext: (step % 2) === 0,\n        });\n    }\n\n    reset() {\n        this.setState({\n            history: [{\n                squares: Array(9).fill(null),\n            }],\n            stepNumber: 0,\n            xIsNext: true,\n        });\n    }\n\n    render() {\n        const history = this.state.history;\n        const current = history[this.state.stepNumber];\n        const winner = calculateWinner(current.squares);\n\n        const moves = history.map((step, move) => {\n            const desc = move ?\n                `Go to move # ${move}` :\n                'Go to game start';\n            return (\n                <ListGroup.Item\n                    key={move}\n                    action\n                    onClick={() => this.jumpTo(move)}\n                    variant=\"dark\"\n                >\n                    {desc}\n                </ListGroup.Item>\n            )\n        })\n\n        let status;\n        if (winner) {\n            status = `The Winner is '${current.squares[winner[0]]}'`;\n        } else if (moves.length === 10 && this.state.stepNumber) {\n            status = \"It's a draw\";\n        } else {\n            status = `Move: Player '${this.state.xIsNext ? 'X' : 'O'}'`;\n        }\n\n        return (\n            <div>\n                <div className=\"game\">\n                    <Card bg=\"dark\">\n                        <Card.Header className=\"status\">\n                            <Card.Title>\n                                <h3>\n                                    {status}\n                                </h3>\n                            </Card.Title>\n                        </Card.Header>\n                        <Board\n                            winner={winner}\n                            squares={current.squares}\n                            onClick={(i) => this.handleClick(i)}\n                        />\n                    </Card>\n                    <div className=\"game-info\">\n                        <ListGroup>{moves}</ListGroup>\n                    </div>\n                </div>\n                <Card.Footer>\n                    <Button\n                        variant=\"outline-danger\"\n                        onClick={() => this.reset()}\n                    >\n                        Reset\n                    </Button>\n                </Card.Footer>\n            </div>\n        );\n    }\n}\n\nfunction calculateWinner(squares) {\n    const lines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6],\n    ];\n    for (let i=0; i < lines.length; i++) {\n        const [a, b, c] = lines[i];\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n            return lines[i];\n        }\n    }\n    return null;\n}\n","import React from 'react';\nimport './App.css';\nimport {Game} from './components/Game/Game';\nimport Card from 'react-bootstrap/Card';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Card bg=\"dark\" className=\"text-center\">\n                <Card.Header >\n                    <Card.Title>\n                        <h1 style={{fontSize: 65}}>\n                            tic-tac-toe\n                        </h1>\n                    </Card.Title>\n                </Card.Header>\n                <Game />\n            </Card>\n\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}